class Solution {
    class UnionFind {
        private int[] id;
        private int[] size;
        public UnionFind(int n) {
            id = new int[n];
            size = new int[n];
            for(int i = 0; i < n; i++) {
                id[i] = i;
                size[i] = 1;
            }
        }
        
        public int find(int i) {
            while(id[i] != i) {
                id[i] = id[id[i]];
                i = id[i];
            }
            return i;
        }
        
        public void union(int i, int j){
            // with balance
            int x = find(i);
            int y = find(j);
            if (x == y) return;
            if (size[x] <= size[y]) {
                id[x] = y;
                size[y] += size[x];
            } else {
                id[y] = x;
                size[x] += size[y];
            }
        }
        
        public boolean isConnected(int i, int j){
            return find(i) == find(j);
        }
        
        public int getSize(int i){
            return size[find(i)];
        }
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        // union find
        // keep the size so that we know how many nodes are saved for removing one intial
        int n = (graph == null) ? 0 : graph.length;
        if (n == 0) return 0;
        
        UnionFind uf = new UnionFind(n);
        for(int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        
        int m = initial.length;
        Map<Integer, Set<Integer>> idToIni = new HashMap<>();
        Map<Integer, Integer> iniSize = new TreeMap<>();
        for(int ini : initial) {
            System.out.println("Id of " + ini + " = " + uf.find(ini));
            int id = uf.find(ini);
            if (!idToIni.containsKey(id)) {
                idToIni.put(id, new HashSet<Integer>());
                idToIni.get(id).add(ini);
            } else {
                idToIni.get(id).add(ini);
            }
        }
        
        for (int id : idToIni.keySet()) {
            if(idToIni.get(id).size() > 1) {
                for (int ini : idToIni.get(id)) {
                    iniSize.put(ini, 0);
                }
            } else {
                for (int ini : idToIni.get(id)) {
                    iniSize.put(ini, uf.getSize(ini));
                }
            }
        }
        
        int cMax = Integer.MIN_VALUE;
        int result = 0;
        for (int x : iniSize.keySet()) {
            if (cMax < iniSize.get(x)) {
                result = x;
                cMax = iniSize.get(x);
            }
        }
        
        return result;
        
    }
}