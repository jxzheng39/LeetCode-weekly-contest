class Solution {
    class UnionFind {
        private int[] id;
        private int[] size;
        public UnionFind(int n) {
            id = new int[n];
            size = new int[n];
            for(int i = 0; i < n; i++) {
                id[i] = i;
                size[i] = 1;
            }
        }
        
        public int find(int i) {
            while(id[i] != i) {
                id[i] = id[id[i]];
                i = id[i];
            }
            return i;
        }
        
        public void union(int i, int j){
            // with balance
            int x = find(i);
            int y = find(j);
            if (x == y) return;
            if (size[x] <= size[y]) {
                id[x] = y;
                size[y] += size[x];
            } else {
                id[y] = x;
                size[x] += size[y];
            }
        }
        
        public boolean isConnected(int i, int j){
            return find(i) == find(j);
        }
        
        public int getSize(int i){
            return size[find(i)];
        }
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        // union find
        // first establish the ufs without any init node
        // then for each init, we skip it, and iterate through
        // the init list, add up all the components connected with 
        // init node
        
        int n = graph.length;
        Arrays.sort(initial);
        
        Set<Integer> initSet = new HashSet<>();
        for (int i : initial) initSet.add(i);
        
        UnionFind uf = new UnionFind(n);
        
        // without initials
        
        for (int i = 0; i < n; i++) {
            if (initSet.contains(i)) continue;
            for (int j = 0; j < n; j++) {
                if (initSet.contains(j)) continue;
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        
        // try out each init node.
        int cMin = Integer.MAX_VALUE;
        int cinit = 0;
        for (int cur : initial) {
            Map<Integer, Integer> dirtySize = new HashMap<Integer, Integer>(); // map from root per component to its size
            for (int mal : initial) {
                if (mal == cur) continue;
                for (int j = 0; j < n; j++) {
                    if (j == cur) continue;
                    if (graph[mal][j] == 1) {
                        dirtySize.putIfAbsent(uf.find(j), uf.getSize(j));
                    }
                }
            }
            
            // sum up
            int cDirtySize = 0;
            for (int s : dirtySize.values()) {
                cDirtySize += s;
            }
            if (cDirtySize < cMin) {
                cMin = cDirtySize;
                cinit = cur;
            }
        }
        
        return cinit;
        
    }
}